{
	"info": {
		"_postman_id": "c3326788-cf0c-4e0c-a3e2-4a5372616a28",
		"name": "Postman_HW2_alexmyt",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7492501"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is valid\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/first",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200 - see test in collection\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test('Name in response is equal to expexted value', () => {\r",
							"    // use variable for easy \r",
							"    pm.expect(jsonData.name).to.eql('Alexey');\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test('Age in response is equal to expexted value', () => {\r",
							"    pm.expect(jsonData.age,'This test will be failed!').to.eql(47); // test failed becouse age returns as a string\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test('Salary in response is quial to salary in variable', () => {\r",
							"    pm.expect(jsonData.salary).to.eql(+pm.variables.get(\"salary\")); \r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let requestBody = pm.request.body.formdata;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Name in response is equal to name in request', () => {\r",
							"    pm.expect(jsonData.name).to.eql(requestBody.get('name')); \r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Age in response is equal to age in request', () => {\r",
							"    pm.expect(jsonData.age,'This test will be failed!').to.eql(+requestBody.get('age'));  // failed becouse age in response has string type\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Salary in response is equal to salary in request', () => {\r",
							"    pm.expect(jsonData.salary).to.eql(+requestBody.get('salary')); \r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test('Salary is valid', function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(requestBody.get('salary') * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseURL}}/user_info_3",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200 - see test in collection\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let requestBody = pm.request.url.query;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Name in response is equal to name in request', () => {\r",
							"    pm.expect(jsonData.name).to.equal(requestBody.get('name')); \r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Age in response is equal to age in request', () => {\r",
							"    pm.expect(jsonData.age,'This test will be failed!').to.equal(+requestBody.get('age'));  // failed becouse age in response has string type\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Salary is valid', function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.equal(requestBody.get('salary') * 4);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Response have property 'dog' with expected properties 'name' and 'age'\", () => {\r",
							"    pm.expect(jsonData).to.have.property('family').that.be.an('object');\r",
							"    pm.expect(jsonData.family).to.have.property('pets').that.be.an('object');\r",
							"    pm.expect(jsonData.family.pets).to.have.property('dog').that.be.an('object');;\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name', 'Luky');\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age', 4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200  - see test in collection\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let requestBody = pm.request.url.query;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Name in response is equal to name in request', () => {\r",
							"    pm.expect(jsonData.name).to.equal(requestBody.get('name')); \r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('Age in response is equal to age in request', () => {\r",
							"    pm.expect(jsonData.age).to.equal(+requestBody.get('age'));  // failed becouse age in response has string type\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(requestBody.get('salary'));\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('Salary[0] is valid', function () {\r",
							"    pm.expect(jsonData.salary[0]).to.equal(+requestBody.get('salary'));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('Salary[1] is valid', function () {\r",
							"    // request return salary[1] (and more) as sring, not as number. Is it must be a fail?\r",
							"    pm.expect(+jsonData.salary[1]).to.equal(requestBody.get('salary') * 2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('Salary[2] is valid', function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.equal(requestBody.get('salary') * 3);\r",
							"});\r",
							"\r",
							"pm.test('Work with environment variables', function () {\r",
							"    pm.expect(pm.environment.name, 'We need to use an environment for this exercisse!').is.not.empty;\r",
							"    \r",
							"    // Create new variables with prefix in environment,\r",
							"    // and delete them at the end\r",
							"\r",
							"    let env_prefix = '__alexmyt_';\r",
							"    let var_name = env_prefix + \"name\";\r",
							"    let var_age = env_prefix + \"age\";\r",
							"    let var_salary = env_prefix + \"salary\";\r",
							"\r",
							"    // 15. Создать в окружении переменную name\r",
							"    pm.environment.set(var_name);\r",
							"    // 16. Создать в окружении переменную age\r",
							"    pm.environment.set(var_age);\r",
							"    // 17. Создать в окружении переменную salary\r",
							"    pm.environment.set(var_salary);\r",
							"\r",
							"    // 18. Передать в окружение переменную name\r",
							"    pm.environment.set(var_name, pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"    // 19. Передать в окружение переменную age\r",
							"    pm.environment.set(var_age, Math.round(pm.variables.replaceIn('{{$randomInt}}') / 10));\r",
							"    // 20. Передать в окружение переменную salary\r",
							"    pm.environment.set(var_salary, pm.variables.replaceIn('{{$randomInt}}') * 10);\r",
							"\r",
							"    let baseURL = pm.collectionVariables.get('baseURL');\r",
							"    pm.sendRequest(pm.environment.replaceIn(`${baseURL}/object_info_4?name={{${var_name}}}&age={{${var_age}}}&salary={{${var_salary}}}`), function (err, response) {\r",
							"        // 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"        response.json().salary.forEach(el => console.log(el));\r",
							"    });\r",
							"\r",
							"    // clear created environment variables\r",
							"    const env_names = Object.keys(pm.environment.toObject()).filter(el => el.startsWith(env_prefix));\r",
							"    env_names.forEach(env_name => pm.environment.unset(env_name));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200 - see test in collection\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let requestData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"start_qa_salary\": {\"type\": \"number\"},\r",
							"        \"qa_salary_after_6_months\": {\"type\": \"number\"},\r",
							"        \"qa_salary_after_12_months\": {\"type\": \"number\"},\r",
							"        \"qa_salary_after_1.5_year\": {\"type\": \"number\"},\r",
							"        \"qa_salary_after_3.5_years\": {\"type\": \"number\"},\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"u_name\": {\"type\": \"array\", \"items\": [{\"type\": \"string\"}, {\"type\": \"number\"}, {\"type\": \"number\"}]},\r",
							"            \"u_age\": {\"type\": \"number\"},\r",
							"            \"u_salary_5_years\": {\"type\": \"number\"}\r",
							"        },\r",
							"    },\r",
							"    \"required\": [\"person\", \"start_qa_salary\", \"qa_salary_after_6_months\", \"qa_salary_after_12_months\", \"qa_salary_after_1.5_year\", \"qa_salary_after_3.5_years\"]\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid, all required fields are presents', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema), tv4.error).to.be.true;\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let salary_from_request = +requestData.salary;\r",
							"pm.test(\"start_qa_salary match salary from request\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.equal(salary_from_request);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months match salary from request*2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.equal(salary_from_request * 2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months match salary from request*2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.equal(salary_from_request * 2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year match salary from request*3.3\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.equal(salary_from_request * 3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years match salary from request*3.8\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.equal(salary_from_request * 3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1] is equal to salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.equal(salary_from_request);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person.u_age is equal to age from request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.equal(+requestData.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"person.u_salary_5_years match salary from request*4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.equal(salary_from_request * 4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for([key,value] of Object.entries(jsonData.person)){\r",
							"    console.log(`\"${key}\" : ${value}`)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseURL}}/user_info_2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// If enabled environment, replace variables with similar one from collection",
					"// We need to do that becouse on tasks we have to check hardcoded values.",
					"if(pm.environment.name){",
					"    ['name', 'age', 'salary'].forEach(el => {",
					"        if(pm.environment.has(el))",
					"            pm.environment.set(el, pm.collectionVariables.get(el));",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://162.55.220.72:5005",
			"type": "string"
		},
		{
			"key": "name",
			"value": "Alexey",
			"type": "string"
		},
		{
			"key": "age",
			"value": "47",
			"type": "string"
		},
		{
			"key": "weight",
			"value": "55",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "5000",
			"type": "string"
		}
	]
}