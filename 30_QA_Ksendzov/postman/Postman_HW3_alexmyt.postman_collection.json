{
	"info": {
		"_postman_id": "bb2e6ef5-1653-4e50-a924-dd5e7705271c",
		"name": "Postman_HW3_alexmyt",
		"description": "Homework from [Anatoly Karpovich](https://www.linkedin.com/in/anatolykarpovich)\n\n1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2\nНеобходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \nP.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\nТребования:\n1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\n2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\n3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\n\n1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\n\n2. http://162.55.220.72:5007/object_info_4\n* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\n\n3. http://162.55.220.72:5005/object_info_3\n Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\n\n4. http://162.55.220.72:5005/user_info_2\n1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\n2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\n3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7492501"
	},
	"item": [
		{
			"name": "EP_1",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Name is absent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text",
											"disabled": true
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length less then 3 chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "ab",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length more then 40 chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "abcdefghijklmnoqrstuvwxyzabcdefghijklmnoqrstuvwxyz",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name with spaces at begin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": " {{name}}",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name with spaces at end",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Age is absent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Age less then 18",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "17",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Age more then 120",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "120",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Salary is absent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Salary is 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Salary is more then 1000000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "10000001",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Negative test\", function () {",
									"    pm.response.to.not.have.status(200);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Respomse must have a body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"pm.test(\"Response must be a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "EP_1_with_csv",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"validationErrors = checkParams();\r",
							"if(validationErrors){\r",
							"    pm.test(\"Negative test: \" + validationErrors, function () {\r",
							"        pm.response.to.not.have.status(200);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Positive test. Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"/**\r",
							" * Validate pm.iterationData and return string with descriptions of errors.\r",
							" */\r",
							"function checkParams(){\r",
							"    let errors = [];\r",
							"    let error;\r",
							"\r",
							"    let name = pm.iterationData.get('name') || pm.variables.get('name');\r",
							"    if(name.startsWith(' ')) errors.push('Name starts with space');\r",
							"    if(name.endsWith(' ')) errors.push('Name ends with space');\r",
							"    if(error = checkString(name, true, 3, 40)) errors.push('Name ' + error);\r",
							"\r",
							"    let age = pm.iterationData.get('age') || pm.variables.get('age');\r",
							"    if(error = checkInteger(age, true, 18, 120)) errors.push('Age ' + error);\r",
							"\r",
							"    let salary = pm.iterationData.get('salary') || pm.variables.get('salary');\r",
							"    if(error = checkInteger(salary, true, 1, 1000000)) errors.push('Salary ' + error);\r",
							" \r",
							"    return errors.join('; ');\r",
							"}\r",
							"\r",
							"/**\r",
							" * Check string for requirements\r",
							" */\r",
							"function checkString(value, required = true, min = undefined, max = undefined){\r",
							"    if(required && value === undefined) return 'is absent';\r",
							"    if(required && !value) return 'is empty';\r",
							"\r",
							"    if(min != undefined && value.length < min) return 'length less then ' + min;\r",
							"    if(max != undefined && value.length > max) return 'length more then ' + max;\r",
							"}\r",
							"\r",
							"/**\r",
							" * Check number for requirements, additioonal check the nember is integer\r",
							" */\r",
							"function checkInteger(value, required = true, min = undefined, max = undefined){\r",
							"    error = checkNumber(value, required, min, max);\r",
							"    if(error) return error;\r",
							"\r",
							"    if(+value != Math.round(value)) return 'is not integer';\r",
							"}\r",
							"\r",
							"/**\r",
							" * Check number for requirements\r",
							" */\r",
							"function checkNumber(value, required = true, min = undefined, max = undefined){\r",
							"    if(required && value === undefined) return 'is absent';\r",
							"    if(isNaN(parseFloat(value))) return 'not a number';\r",
							"    if(min != undefined && value < min) return 'less then ' + min;\r",
							"    if(max != undefined && value > max) return 'more then ' + max;\r",
							"}\r",
							"\r",
							"/**\r",
							" * Also we can describe type of test (positive or negative) directly in the data file\r",
							" * this will save us from having to define the test type in the script \r",
							" */\r",
							"\r",
							"// If test positive or data file not defined - run positive tests,\r",
							"// otherwise run negative tests \r",
							"// !pm.iterationData.has('isPositive') || pm.iterationData.get('isPositive')\r",
							"//     ? positiveTests()\r",
							"//     : negativeTests();\r",
							"\r",
							"// function positiveTests(){\r",
							"//     pm.test(\"Status code is 200\", function () {\r",
							"//         pm.response.to.have.status(200);\r",
							"//     });\r",
							"//     pm.test(\"Content-Type is present\", function () {\r",
							"//         pm.response.to.have.header(\"Content-Type\");\r",
							"//     });\r",
							"//     pm.test(\"Respomse must have a body\", function () {\r",
							"//         pm.response.to.be.withBody;\r",
							"//     });\r",
							"//     pm.test(\"Response must be a JSON\", function () {\r",
							"//         pm.response.to.be.json;\r",
							"//         pm.response.to.not.have.jsonBody(\"error\");\r",
							"//     });\r",
							"// }\r",
							"\r",
							"// function negativeTests(){\r",
							"//     pm.test(pm.iterationData.get('Description') + \" and response status code other then 200\", function () {\r",
							"//         pm.response.to.not.have.status(200);\r",
							"//     });\r",
							"// }"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				},
				"description": "Run this request with data-file **Postman_HW3_data.csv**"
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, \r",
							" * в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							" */\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let requestBody = pm.request.url.query;\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"for(let i=0; i<3; i++){\r",
							"    pm.test(`Salary[${i}] is valid`, function () {\r",
							"        pm.expect(+jsonData.salary[i]).to.equal(requestBody.get('salary') * (i+1));\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							"/* Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось \r",
							"/* ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							" */\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let requestBody = pm.request.url.query.toObject();\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Values in response is equal to same in request', () => {\r",
							"    \r",
							"    // This not work, because request properties always be a strings, while same properties in response can be an other types\r",
							"    //pm.expect(jsonData).to.deep.own.include(requestBody);\r",
							"    \r",
							"    let requestData = {\r",
							"        age: requestBody.age,\r",
							"        salary: +requestBody.salary,\r",
							"        name: requestBody.name\r",
							"    };\r",
							"    pm.expect(jsonData).to.include(requestData);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, \r",
							" * чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). \r",
							" * Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							" * \r",
							" * 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, \r",
							" * чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). \r",
							" * Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							" * \r",
							" * 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							" */\r",
							"\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200 - see test in collection\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let requestData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let requiredFields = [\r",
							"    {name: \"person\"}, \r",
							"    {name: \"start_qa_salary\", scale: 1}, \r",
							"    {name: \"qa_salary_after_6_months\", scale: 2},  \r",
							"    {name: \"qa_salary_after_12_months\", scale: 2.7},  \r",
							"    {name: \"qa_salary_after_1.5_year\", scale: 3.3},  \r",
							"    {name: \"qa_salary_after_3.5_years\", scale: 3.8}\r",
							"];\r",
							"\r",
							"let salary_from_request = +requestData.salary;\r",
							"\r",
							"requiredFields.forEach(field =>{\r",
							"    pm.test(`Required field '${field.name}' is present` + (field.scale ? ` and equal salary*${field.scale}` : ''), () => {\r",
							"        pm.expect(jsonData,'Field not found').have.property(field.name);\r",
							"        if(field.scale) pm.expect(jsonData[field.name], `Value is not match salary*${field.scale}`).to.equal(salary_from_request * field.scale)\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseURL}}/user_info_2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://162.55.220.72:5005",
			"type": "string"
		},
		{
			"key": "name",
			"value": "Alexey",
			"type": "string"
		},
		{
			"key": "age",
			"value": "49",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "1000",
			"type": "string"
		}
	]
}