{
	"info": {
		"_postman_id": "bb2e6ef5-1653-4e50-a924-dd5e7705271c",
		"name": "Postman_HW3_alexmyt",
		"description": "Homework from [Anatoly Karpovich](https://www.linkedin.com/in/anatolykarpovich)\n\n1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2\nНеобходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \nP.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\nТребования:\n1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\n2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\n3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\n\n1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\n\n2. http://162.55.220.72:5007/object_info_4\n* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\n\n3. http://162.55.220.72:5005/object_info_3\n Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\n\n4. http://162.55.220.72:5005/user_info_2\n1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\n2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\n3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7492501"
	},
	"item": [
		{
			"name": "EP_1",
			"item": [
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Name is absent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text",
											"disabled": true
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length less then 3 chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "ab",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name length more then 40 chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "abcdefghijklmnoqrstuvwxyzabcdefghijklmnoqrstuvwxyz",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name with spaces at begin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": " {{name}}",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name with spaces at end",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Age is absent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Age less then 18",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "17",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Age more then 120",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "120",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Salary is absent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Salary is 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Salary is more then 1000000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}} ",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "10000001",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is not 200\", function () {",
									"    pm.response.to.not.have.status(200);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Test with data file",
					"item": [
						{
							"name": "EP_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// \r",
											"!pm.iterationData.has('isPositive') || pm.iterationData.get('isPositive')\r",
											"    ? positiveTests()\r",
											"    : negativeTests();\r",
											"\r",
											"\r",
											"function positiveTests(){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"    pm.test(\"Respomse must have a body\", function () {\r",
											"        pm.response.to.be.withBody;\r",
											"    });\r",
											"    pm.test(\"Response must be a JSON\", function () {\r",
											"        pm.response.to.be.json;\r",
											"        pm.response.to.not.have.jsonBody(\"error\");\r",
											"    });\r",
											"}\r",
											"\r",
											"function negativeTests(){\r",
											"    pm.test(pm.iterationData.get('Description') + \": Status code is not 200\", function () {\r",
											"        pm.response.to.not.have.status(200);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "{{name}}",
											"type": "text"
										},
										{
											"key": "age",
											"value": "{{age}}",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						}
					],
					"description": "Use a *Postman_HW3_data.csv* data file for run test in this directory"
				},
				{
					"name": "Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Respomse must have a body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"pm.test(\"Response must be a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, \r",
							" * в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							" */\r",
							"\r",
							"\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200  - see test in collection\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let requestBody = pm.request.url.query;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Name in response is equal to name in request', () => {\r",
							"    pm.expect(jsonData.name).to.equal(requestBody.get('name')); \r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('Age in response is equal to age in request', () => {\r",
							"    pm.expect(jsonData.age).to.equal(+requestBody.get('age'));  // failed becouse age in response has string type\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(requestBody.get('salary'));\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"for(let i=0; i<3; i++){\r",
							"    pm.test(`Salary[${i}] is valid`, function () {\r",
							"        pm.expect(+jsonData.salary[i]).to.equal(requestBody.get('salary') * (i+1));\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test('Work with environment variables', function () {\r",
							"    pm.expect(pm.environment.name, 'We need to use an environment for this exercisse!').is.not.empty;\r",
							"    \r",
							"    // Create new variables with prefix in environment,\r",
							"    // and delete them at the end\r",
							"\r",
							"    let env_prefix = '__alexmyt_';\r",
							"    let var_name = env_prefix + \"name\";\r",
							"    let var_age = env_prefix + \"age\";\r",
							"    let var_salary = env_prefix + \"salary\";\r",
							"\r",
							"    // 15. Создать в окружении переменную name\r",
							"    pm.environment.set(var_name);\r",
							"    // 16. Создать в окружении переменную age\r",
							"    pm.environment.set(var_age);\r",
							"    // 17. Создать в окружении переменную salary\r",
							"    pm.environment.set(var_salary);\r",
							"\r",
							"    // 18. Передать в окружение переменную name\r",
							"    pm.environment.set(var_name, pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"    // 19. Передать в окружение переменную age\r",
							"    pm.environment.set(var_age, Math.round(pm.variables.replaceIn('{{$randomInt}}') / 10));\r",
							"    // 20. Передать в окружение переменную salary\r",
							"    pm.environment.set(var_salary, pm.variables.replaceIn('{{$randomInt}}') * 10);\r",
							"\r",
							"    let baseURL = pm.collectionVariables.get('baseURL');\r",
							"    pm.sendRequest(pm.environment.replaceIn(`${baseURL}/object_info_4?name={{${var_name}}}&age={{${var_age}}}&salary={{${var_salary}}}`), function (err, response) {\r",
							"        // 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"        response.json().salary.forEach(el => console.log(el));\r",
							"    });\r",
							"\r",
							"    // clear created environment variables\r",
							"    const env_names = Object.keys(pm.environment.toObject()).filter(el => el.startsWith(env_prefix));\r",
							"    env_names.forEach(env_name => pm.environment.unset(env_name));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							"/* Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось \r",
							"/* ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							" */\r",
							"\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200 - see test in collection\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let requestBody = pm.request.url.query;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Values in response is equal to same in request', () => {\r",
							"    pm.expect(jsonData.name, 'Name').to.eql(requestBody.get('name')); \r",
							"    pm.expect(jsonData.age,'This test will be failed! Age').to.eql(+requestBody.get('age'));  // failed becouse age in response has string type\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year, 'u_salary_1_5_year').to.eql(requestBody.get('salary') * 4);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Response have property 'dog' with expected properties 'name' and 'age'\", () => {\r",
							"    pm.expect(jsonData).to.have.property('family').that.be.an('object');\r",
							"    pm.expect(jsonData.family).to.have.property('pets').that.be.an('object');\r",
							"    pm.expect(jsonData.family.pets).to.have.property('dog').that.be.an('object');;\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name', 'Luky');\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age', 4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, \r",
							" * чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). \r",
							" * Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							" * \r",
							" * 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, \r",
							" * чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). \r",
							" * Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							" * \r",
							" * 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							" */\r",
							"\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200 - see test in collection\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let requestData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let requiredFields = [\r",
							"    {name: \"person\"}, \r",
							"    {name: \"start_qa_salary\", scale: 1}, \r",
							"    {name: \"qa_salary_after_6_months\", scale: 2},  \r",
							"    {name: \"qa_salary_after_12_months\", scale: 2.7},  \r",
							"    {name: \"qa_salary_after_1.5_year\", scale: 3.3},  \r",
							"    {name: \"qa_salary_after_3.5_years\", scale: 3.8}\r",
							"];\r",
							"\r",
							"let salary_from_request = +requestData.salary;\r",
							"\r",
							"requiredFields.forEach(field =>{\r",
							"    pm.test(`Required field '${field.name}' is present and valid`, () => {\r",
							"        pm.expect(jsonData,'Field not found').have.property(field.name);\r",
							"        if(field.scale) pm.expect(jsonData[field.name], `Value not match salary*${field.scale}`).to.equal(salary_from_request * field.scale)\r",
							"    });\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1] is equal to salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.equal(salary_from_request);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person.u_age is equal to age from request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.equal(+requestData.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"person.u_salary_5_years match salary from request*4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.equal(salary_from_request * 4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for([key,value] of Object.entries(jsonData.person)){\r",
							"    console.log(`\"${key}\" : ${value}`)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseURL}}/user_info_2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://162.55.220.72:5005",
			"type": "string"
		},
		{
			"key": "name",
			"value": "Alexey",
			"type": "string"
		},
		{
			"key": "age",
			"value": "49",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "1000",
			"type": "string"
		}
	]
}